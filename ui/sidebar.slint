import { Button, HorizontalBox, VerticalBox } from "std-widgets.slint";

export struct Channel {
    id: int,
    title: string,
    unread: bool,
    notifications: int
}

export struct ChannelGroup {
    id: int,
    title: string,
    channels: [Channel]
}

export component SidebarItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in property <bool> unread;

    in-out property <string> text <=> label.text;

    callback clicked <=> touch.clicked;

    min-height: l.preferred-height;

    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.opacity: 0.8;
        }
    ]

    state := Rectangle {
        opacity: 0;
        background: #ac0000;

        animate opacity { duration: 150ms; }
    }

    l := HorizontalBox {
        y: (parent.height - self.height) / 2;
        spacing: 0px;

        label := Text {
            color: white;
            vertical-alignment: center;
            width: 225px; // TODO: no hardcoding
            overflow: TextOverflow.elide;
         }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}


export component Sidebar inherits Rectangle {
    in property <[ChannelGroup]> model: [];
    in property <string> title <=> label.text;
    out property <int> current-item: 0;
    out property <int> current-focused: fs.has-focus ? fs.focused-tab : -1; // The currently focused tab

    callback on-change(int);

    width: 250px;
    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: #911b1f;

        fs := FocusScope {
            key-pressed(event) => {
                if (event.text == "\n") {
                     root.current-item = root.current-focused;
                    on-change(root.model[root.current-item].id);
                     return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                     root.current-item = root.current-focused;
                     on-change(root.model[root.current-item].id);
                     return accept;
                }
                return reject;
            }

            property <int> focused-tab: 0;

            x: 0;
            width: 0; // Do not react on clicks
        }
    }

    VerticalBox {
        padding-left: 0px;
        padding-right: 0px;
        alignment: start;

        label := Text {
            color: white;
            font-size: 16px;
            horizontal-alignment: center;
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for category in root.model : VerticalLayout {
                Text {
                    text: category.title;
                    color: lightgrey;
                    overflow: TextOverflow.elide;
                    font-size: 15px;
                }
                for item in category.channels : SidebarItem {
                    clicked => {
                        root.current-item = item.id;
                        on-change(root.model[root.current-item].id);
                    }
                    has-focus: item.id == root.current-focused;
                    text: item.title;
                    selected: item.id == root.current-item;
                }
            }
        }

        VerticalLayout {
            bottom := VerticalBox {
                padding-top: 0px;
                padding-bottom: 0px;

                @children
             }
        }
    }
}
