import { Button, HorizontalBox, ScrollView, VerticalBox } from "std-widgets.slint";

export struct Reaction {
    user_ids: [int],
    id: int
}

export component ReactionComponent inherits Rectangle {
    in property <Reaction> reaction;

    background: #f2f2f2;
    border-radius: 5px;
    width: 40px;
    height: 25px;

    HorizontalBox {
        if reaction.id == 1: Image {
            source: @image-url("thumbs-up.png");
            height: 22px;
            width: 22px;
        }
        // TODO: Add rest of the images

        Text {
            text: reaction.user_ids.length;
            vertical-alignment: TextVerticalAlignment.center;
        }
    }
}

// https://img.icons8.com/emoji/48/thumbs-down-emoji.png

export struct Embed {
    title: string,
    link: string,
    description: string
}

export component EmbedComponent inherits Rectangle {
    in property <Embed> embed: {
        title: "Test Embed",
        link: "https://example.com",
        description: "This is some example text that goes on and on and on and on"
    };

    in property <length> m-width: 250px;

    border-radius: 5px;
    border-width: 1px;
    border-color: grey;
    
    callback clicked <=> touch.clicked;
    
    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
    ]
    
    state := Rectangle {
        opacity: 0;
        background: grey;

        animate opacity { duration: 150ms; }
    }

    VerticalBox {
        Text {
            text: embed.link;
            font-size: 11px;
            width: root.m-width - 30px;
            overflow: TextOverflow.elide;
        }
        Text {
            text: embed.title;
            font-size: 15px;
        }
        Text {
            text: embed.description;
            wrap: word-wrap;
            width: root.m-width - 30px;
        }
    }
    
    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

export struct Message {
    id: int,
    user: string, // TODO: user struct
    profile_picture: image,
    content: string,
    has_parent: bool,
    parent_message: string,
    images: [image],
    embeds: [Embed],
    reactions: [Reaction]
    // TODO: Embeds
}

export component MessageComponent {
    width: 500px;
    in property <Message> message;

    in property <length> m-width: 500px;

    callback delete(int);

    callback open-link(string);

    HorizontalLayout {
        padding-top: 10px;
        padding-bottom: 10px;
        Image {
            source: message.profile_picture;
            width: 50px;
            height: 50px;
        }
        VerticalLayout {
            padding-left: 10px;
            Text {
                visible: message.has_parent;
                text: "Parent: \{message.parent_message}";
            }
            Text {
                text: message.user;
                font-size: 15px;
                max-height: 25px;
            }
            Text {
                text: message.content;
                font-size: 14px;
                wrap: word-wrap;
                width: root.m-width - 80px;
            }
            HorizontalLayout {
                for reaction in message.reactions: ReactionComponent {
                    reaction: reaction;
                }
            }
            HorizontalLayout {
                for img in message.images: Image {
                    source: img;
                    height: img.height * 1px;
                    width: img.width * 1px;
                }
            }
            HorizontalLayout {
                padding-top: 10px;
                for embed in message.embeds: EmbedComponent {
                    embed: embed;
                    clicked => {open-link(embed.link)}
                }
            }
        }
    }
}
