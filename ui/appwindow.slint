import { Button, HorizontalBox, ScrollView, VerticalBox } from "std-widgets.slint";

export struct Channel {
    id: int,
    title: string,
    supergroup: bool,
}

export struct Message {
    id: int,
    user: string,
    content: string
}

component SideBarItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text <=> label.text;

    callback clicked <=> touch.clicked;

    min-height: l.preferred-height;

    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.opacity: 0.8;
        }
    ]

    state := Rectangle {
        opacity: 0;
        background: #ac0000;

        animate opacity { duration: 150ms; }
    }

    l := HorizontalBox {
        y: (parent.height - self.height) / 2;
        spacing: 0px;

        label := Text {
            color: white;
            vertical-alignment: center;
            width: 225px; // TODO: no hardcoding
            overflow: TextOverflow.elide;
         }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}


export component SideBar inherits Rectangle {
    in property <[Channel]> model: [];
    in property <string> title <=> label.text;
    out property <int> current-item: 0;
    out property <int> current-focused: fs.has-focus ? fs.focused-tab : -1; // The currently focused tab

    callback on-change();

    width: 250px;
    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: #911b1f;

        fs := FocusScope {
            key-pressed(event) => {
                if (event.text == "\n") {
                     root.current-item = root.current-focused;
                    on-change();
                     return accept;
                }
                if (event.text == Key.UpArrow) {
                     self.focused-tab = Math.max(self.focused-tab - 1,  0);
                     return accept;
                }
                if (event.text == Key.DownArrow) {
                     self.focused-tab = Math.min(self.focused-tab + 1, root.model.length - 1);
                     return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                     root.current-item = root.current-focused;
                     on-change();
                     return accept;
                }
                return reject;
            }

            property <int> focused-tab: 0;

            x: 0;
            width: 0; // Do not react on clicks
        }
    }

    VerticalBox {
        padding-left: 0px;
        padding-right: 0px;
        alignment: start;

        label := Text {
            color: white;
            font-size: 16px;
            horizontal-alignment: center;
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model : SideBarItem {
                clicked => {
                    root.current-item = index;
                    on-change();
                }

                has-focus: index == root.current-focused;
                text: item.title;
                selected: index == root.current-item;
            }
        }

        VerticalLayout {
            bottom := VerticalBox {
                padding-top: 0px;
                padding-bottom: 0px;

                @children
             }
        }
    }
}

export component AppWindow inherits Window {
    in-out property <string> fullname: "";
    in-out property <[Channel]> channels;
    out property <int> current_sidebar_item_id <=> side-bar.current-item;
    in-out property <[Message]> messages;
    out property <length> visible_height <=> scroll-view.visible-height;
    out property <length> viewport_y <=> scroll-view.viewport-y;
    out property <length> viewport_height <=> scroll-view.viewport-height;
    in-out property <int> top_msg_id;
    in-out property <int> channel_id;

    callback setChannel <=> side-bar.on-change;
    callback scrollChannel();

    HorizontalLayout {
        side-bar := SideBar {
            title: @tr("Prontus");
            model: channels;
        }
        VerticalBox {
            scroll-view := ScrollView { // TODO: limit width
                VerticalLayout {
                    for message in messages:Text  {
                        text: "\{message.user}: \{message.content}";
                    }
                    Text {
                        text: "\{top_msg_id}";
                    }
                }
//                HorizontalLayout {
//                    TextInput {
//                    }
//                    Button {
//                        text: "Send";
//                    }
//                }
                area := TouchArea {
                    width: parent.width;
                    height: parent.height;
                    scroll-event(e) => {
                        scrollChannel();
                        EventResult.accept
                    }
                }
            }
        }
    }
}
